name: Release

on:
  workflow_run:
    workflows: ["Stable"]
    types:
      - completed
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      - name: Run tests
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-north-1
          PROJECT_ID: entigo-infralib-agent
          LOCATION: europe-north1
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          ZONE: europe-north1-a
        run: |
          mkdir -p $(echo ~)/.config/gcloud
          echo ${GOOGLE_CREDENTIALS} > $(echo ~)/.config/gcloud/application_default_credentials.json
          gcloud auth activate-service-account --key-file=$(echo ~)/.config/gcloud/application_default_credentials.json
          gcloud config set project $PROJECT_ID
          gcloud auth list
          gcloud config set account $(gcloud auth list --filter=status:ACTIVE --format="value(account)")
          go test -timeout 25m -v ./...
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Get latest release
        id: get_latest_release
        uses: actions/github-script@v7
        env:
          RELEASE_VERSION: ${{ vars.RELEASE_VERSION }}
        with:
          script: |
            const latestStableRelease = await github.rest.repos.getLatestRelease({ owner: context.repo.owner, repo: context.repo.repo });
            const currentMain =   await github.rest.repos.getBranch({ owner: context.repo.owner, repo: context.repo.repo, branch: "main" });
            const currentStable = await github.rest.repos.getCommit({ owner: context.repo.owner, repo: context.repo.repo, ref: 'refs/tags/' + latestStableRelease.data.tag_name });
            
            if (currentStable) {
              if (currentMain) {
                core.info('Latest main release commit: ' + currentStable.data.sha);
                core.info('Main branch commit: ' +  currentMain.data.commit.sha);
                if ( currentStable.data.sha != currentMain.data.commit.sha) {
                  
                  core.setOutput('new_release_needed', "true");
                  const versionString = '' + latestStableRelease.data.tag_name;
                  const regex = /^v(\d+)\.(\d+)\.(\d+).*$/;
                  const match = versionString.match(regex);
                  const major = parseInt(match[1], 10);
                  const minor = parseInt(match[2], 10);
                  const patch = parseInt(match[3], 10) + 1;
                  
                  const versionValue = process.env.RELEASE_VERSION;
                  let new_version;
                  if ( versionValue != `${major}.${minor}` ) {
                    core.info('Env var major and minor version differ from latest release, initializing new release! ' + versionValue + ' vs ' + major + '.' + minor);
                    new_version = `v${versionValue}.0`
                  } else {
                    new_version = `v${major}.${minor}.${patch}`
                  }
                  core.setOutput('new_version',  new_version);
                  core.setOutput('major_version',  `v${major}`);
                  core.info('Latest release is not the same as main branch, need to make a new release ' + new_version);
                } else {
                  core.info('Latest release is same as main branch, no need to make a new release');
                  core.setOutput('new_release_needed', "false");
                }
              } else {
                 core.setFailed('No main branch found');
              }
            } else {
              core.setFailed('No main releases found');
            }

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        if: ${{ steps.get_latest_release.outputs.new_release_needed == 'true' }}
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to Public ECR
        uses: docker/login-action@v3
        if: ${{ steps.get_latest_release.outputs.new_release_needed == 'true' }}
        with:
          registry: public.ecr.aws
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        env:
          AWS_REGION: us-east-1

      - name: Build and push image
        if: ${{ steps.get_latest_release.outputs.new_release_needed == 'true' }}
        run: |
          docker buildx build --push \
            --platform linux/arm64/v8,linux/amd64 \
            --build-arg GITHUB_SHA=${GITHUB_SHA} \
            --build-arg VERSION=${{ steps.get_latest_release.outputs.new_version }} \
            -t public.ecr.aws/entigolabs/entigo-infralib-agent:${{ steps.get_latest_release.outputs.new_version }} \
            -t public.ecr.aws/entigolabs/entigo-infralib-agent:${{ steps.get_latest_release.outputs.major_version }} \
            -t public.ecr.aws/entigolabs/entigo-infralib-agent:latest \
            -t entigolabs/entigo-infralib-agent:latest \
            -t entigolabs/entigo-infralib-agent:${{ steps.get_latest_release.outputs.major_version }} \
            -t entigolabs/entigo-infralib-agent:${{ steps.get_latest_release.outputs.new_version }} .
      - name: Authenticate with GitHub CLI
        run: gh auth login --with-token <<< ${{ secrets.GITHUB_TOKEN }}
        if: ${{ steps.get_latest_release.outputs.new_release_needed == 'true' }}

      - name: Create Release
        id: create_release
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a ${{ steps.get_latest_release.outputs.new_version }} -m "Release ${{ steps.get_latest_release.outputs.new_version }}"
          git push origin ${{ steps.get_latest_release.outputs.new_version }}
          RELEASE_URL=$(gh release create ${{ steps.get_latest_release.outputs.new_version }} \
          --title "Release ${{ steps.get_latest_release.outputs.new_version }}" \
          --generate-notes \
          --draft=false \
          --latest=true \
          --prerelease=false)
          echo "RELEASE_URL=$RELEASE_URL" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ steps.get_latest_release.outputs.new_release_needed == 'true' }}
