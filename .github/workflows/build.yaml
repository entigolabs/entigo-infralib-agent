name: Build and release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get latest release
        id: get_latest_release
        uses: actions/github-script@v6
        with:
          script: |
#            const latestStableRelease = await github.rest.repos.getLatestRelease({ owner: context.repo.owner, repo: context.repo.repo });
#            const versionString = '' + latestStableRelease.data.tag_name;
#            const regex = /^v(\d+)\.(\d+)\.(\d+)$/;
#            const match = versionString.match(regex);
#            const major = parseInt(match[1], 10);
#            const minor = parseInt(match[2], 10);
#            const patch = parseInt(match[3], 10) + 1;
#            const new_version = `v${major}.${minor}.${patch}`
            core.setOutput('new_version',  'v0.3.2'); # TODO Enable this after non-prerelease release

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      - name: Build the go application
        env:
          GOOS: linux
          GOARCH: amd64
        run: |
          go build -ldflags="-w -s" -o bin/ei-agent main.go

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build and push image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          aws-region: us-east-1
        run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin && docker build -f Dockerfile.github -t entigolabs/entigo-infralib-agent:${{ steps.get_latest_release.outputs.new_version }}-rc${{ github.run_number }} . && docker push entigolabs/entigo-infralib-agent:${{ steps.get_latest_release.outputs.new_version }}-rc${{ github.run_number }}
          aws ecr-public get-login-password --region us-east-1 | docker login -u AWS --password-stdin public.ecr.aws/entigolabs
          docker tag entigolabs/entigo-infralib-agent:${{ steps.get_latest_release.outputs.new_version }}-rc${{ github.run_number }} public.ecr.aws/entigolabs/entigo-infralib-agent:${{ steps.get_latest_release.outputs.new_version }}-rc${{ github.run_number }} && docker push public.ecr.aws/entigolabs/entigo-infralib-agent:${{ steps.get_latest_release.outputs.new_version }}-rc${{ github.run_number }}
          docker tag entigolabs/entigo-infralib-agent:${{ steps.get_latest_release.outputs.new_version }}-rc${{ github.run_number }} entigolabs/entigo-infralib-agent:latest && docker push entigolabs/entigo-infralib-agent:latest
          docker tag public.ecr.aws/entigolabs/entigo-infralib-agent:${{ steps.get_latest_release.outputs.new_version }}-rc${{ github.run_number }} public.ecr.aws/entigolabs/entigo-infralib-agent:latest && docker push public.ecr.aws/entigolabs/entigo-infralib-agent:latest

      - name: Authenticate with GitHub CLI
        run: gh auth login --with-token <<< ${{ secrets.GITHUB_TOKEN }}
        if: ${{ github.event_name == 'push' }}

      - name: Create Release
        id: create_release
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a ${{ steps.get_latest_release.outputs.new_version }}-rc${{ github.run_number }} -m "Release ${{ steps.get_latest_release.outputs.new_version }}-rc${{ github.run_number }}"
          git push origin ${{ steps.get_latest_release.outputs.new_version }}-rc${{ github.run_number }}
          RELEASE_URL=$(gh release create ${{ steps.get_latest_release.outputs.new_version }}-rc${{ github.run_number }} \
          --title "Release ${{ steps.get_latest_release.outputs.new_version }}-rc${{ github.run_number }}" \
          --generate-notes \
          --draft=false \
          --latest=false \
          --prerelease=false)
          echo "RELEASE_URL=$RELEASE_URL" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ github.event_name == 'push' }}
